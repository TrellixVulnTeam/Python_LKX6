"""¬øQu√© es un contorno?

Un contorno es una curva que une todos los puntos continuos en una imagen (a lo largo de los bordes), que tienen el mismo color o 
intensidad. Los contornos son una herramienta √∫til para el an√°lisis de formas y para la detecci√≥n y reconocimiento de objetos. 
Algunas consideraciones generales a tener en cuenta son:

    Para una mayor precisi√≥n lo mejor es utilizar im√°genes binarias. As√≠ que antes de encontrar los contornos, es recomendable 
    aplicar cierto umbral o utilizar el algoritmo de Canny  para la detecci√≥n de bordes.
    La funci√≥n findContours modifica la imagen de origen. Por lo tanto, si desea conservar la imagen original incluso despu√©s de
    encontrar contornos, esta se debe almacenar en una variable distinta.
    En OpenCV, encontrar contornos es como encontrar objetos blancos de fondo negro. As√≠ que recuerde, el objeto a ser encontrado 
    debe ser blanco y el fondo debe ser negro.

Veamos c√≥mo encontrar contornos de una imagen binaria:"""

import numpy as np
import cv2
from matplotlib import pyplot as plt
im = cv2.imread('whitebox.jpg')
imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
ret,thresh = cv2.threshold(imgray,127,255,0)
imagen, contornos = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
plt.subplot(221),plt.imshow(im),plt.title('Original')
plt.xticks([]), plt.yticks([])
plt.subplot(222),plt.imshow(imgray),plt.title('escala de gris')
plt.xticks([]), plt.yticks([])
plt.subplot(223),plt.imshow(thresh),plt.title('Threshold')
plt.xticks([]), plt.yticks([])
plt.subplot(224),plt.imshow(imagen),plt.title('Promediada')
plt.xticks([]), plt.yticks([])
plt.show()

"""V√©ase que hay tres argumentos en la funci√≥n cv2.findContours(), el primero es la imagen fuente, el segundo es el modo de 
recuperaci√≥n de contorno, y el tercero es el m√©todo de aproximaci√≥n de contorno. Del mismo modo, la funci√≥n posee tres variables 
de salida: imagen, contornos y jerarqu√≠a. Contornos es una lista de Python de todos los contornos de la imagen. Cada contorno 
individual es una matriz Numpy de coordenadas (x, y) de los puntos de los bordes del objeto.
üóíNota 
M√°s adelante se dicutir√°n en detalle, los argumentos segundo y tercero, y sobre la jerarqu√≠a. Hasta entonces, los valores dados 
a ellos en el ejemplo del c√≥digo funcionar√°n bien para todas las im√°genes.
¬øC√≥mo dibujar contornos?

Para dibujar los contornos se utiliza la funci√≥n cv2.drawContours. Esta funci√≥n tambi√©n se puede utilizar para dibujar cualquier 
forma siempre que se conozcan sus contornos. El primer argumento de la funci√≥n es la imagen fuente, el segundo argumento son los 
contornos, que deben ser pasados como una lista de Python; el tercer argumento es el √≠ndice de los contornos (√∫til para dibujar 
contornos individuales; para dibujar todos los contornos fijar este par√°metro en -1), y los restantes argumentos son color, grosor, 
etc.

Para dibujar todos los contornos en una imagen:"""

img = cv2.drawContours(img, contornos, -1, (0,255,0), 3)

#Para dibujar, d√≠gamos, el cuarto contorno:

img = cv2.drawContours(img, contornos, 3, (0,255,0), 3)

#Sin embargo, la mayor√≠a de las veces el m√©todo siguiente resulta mucho m√°s √∫til.

cnt = contornos[4]
img = cv2.drawContours(img, [cnt], 0, (0,255,0), 3)

"""Nota 
Aunque los dos m√©todos anteriores conducen exactamente al mismo resultado, m√°s adelante se ver√° que el segundo resulta mucho m√°s 
√∫til.
M√©todo de aproximaci√≥n de contornos

Este es el tercer argumento en la funci√≥n cv2.findContours. Veamos su significado.

M√°s arriba hemos dicho que los contornos son los l√≠mites de una forma con la misma intensidad. La variable contornos almacena las 
coordenadas (x, y) de los bordes de una forma. ¬øPero almacena todas las coordenadas? Esto se precisamente lo que se especifica 
mediante este m√©todo de aproximaci√≥n de contorno.

Si se pasa cv2.CHAIN_APPROX_NONE, todos los puntos de los bordes se almacenan. ¬øPero realmente necesitamos todos los puntos? Por 
ejemplo, supongamos que encontramos el contorno de una l√≠nea recta. ¬øNecesitamos todos los puntos de la recta para representar esa 
l√≠nea? No, s√≥lo necesitamos dos puntos a los extremos de esa l√≠nea. Esto es lo que hace cv2.CHAIN_APPROX_SIMPLE. Es decor, elimina 
todos los puntos redundantes y comprime el contorno, ahorrando memoria.

Debajo se muestra una imagen de un rect√°ngulo que ilustra esta t√©cnica. Basta con dibujar un c√≠rculo en todas las coordenadas de la
 matriz de contorno (en color azul). La primera imagen muestra los puntos que se obtienen con cv2.CHAIN_APPROX_NONE (734 puntos) y 
 la segunda imagen muestra los obtenidos con cv2.CHAIN_APPROX_SIMPLE (s√≥lo 4 puntos). ¬°Obs√©rvese, cu√°nta memoria se ahorra!"""

